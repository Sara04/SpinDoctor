function [j] = J_SinOGSE(lambda, sequence)
%J_SINOGSE Compute the quantity J(lambda_n, f) for SinOGSE sequence
%
%   lambda: double
%   sequence: Sequence class
%
%   j: double


d = sequence.delta;
D = sequence.Delta;
n = sequence.nperiod;

if lambda < 1e-7
    % Use Taylor expansion when lambda is close to 0 
    % to improve numerical stability
    j = lambda ...
        + lambda^3 * d * (4*n^2*pi^2*d ...
            - 12*D*n^2*pi^2 - 15*d) ...
            / (36 * n^2 * pi^2) ...
        + lambda^4 * d * D^2 / 6 ...
        + lambda^5 * d * (120*D*n^2*pi^2*d^2 + 4*n^4*pi^4*d^3 ...
            - 20*D*n^4*pi^4*d^2 + 105*d^3 ...
            - 40*n^2*pi^2*d^3 - 40*D^3*n^4*pi^4) ...
            / (720 * n^4 * pi^4) ...
        + lambda^6 * ((D^4*d^2 + D^2*d^4)/24 ...
            - (D^2*d^4) / (4*n^2*pi^2)) ...
            / (3*d);
else
    j = 4 * pi^2 * n^2 * ( ...
        (lambda*d)^3 + 4*n^2*pi^2*( ...
            + exp(-lambda * (D + d)) ...
            + exp(-lambda * (D - d)) ...
            - 2 * exp(-lambda * d) ...
            - 2 * exp(-lambda * D) ...
            + lambda * d ...
            + 2) ) ...
        / (3 * d * (4*n^2*pi^2 + lambda^2*d^2)^2);
end
end
